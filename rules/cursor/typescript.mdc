---
description: 
globs: *.ts
alwaysApply: false
---
# TypeScript Development Rules

## Basic Principles
- Use English for all code and documentation
- Always declare types for variables and functions (avoid `any`)
- Create necessary custom types
- Use JSDoc for public classes and methods
- No blank lines within functions
- One export per file

## Nomenclature
- PascalCase for classes
- camelCase for variables, functions, methods
- kebab-case for file and directory names
- UPPERCASE for environment variables
- Avoid magic numbers, define constants
- Start functions with verbs
- Use verbs for booleans: `isLoading`, `hasError`, `canDelete`
- Complete words over abbreviations (except standard: API, URL, i/j for loops, err, ctx, req/res/next)

## Functions
- Short functions with single purpose (<20 instructions)
- Name with verb + noun pattern
- Boolean returns: `isX`, `hasX`, `canX`
- Void returns: `executeX`, `saveX`
- Avoid nesting with early returns and utility extraction
- Use higher-order functions (map, filter, reduce)
- Arrow functions for simple logic (<3 instructions)
- Named functions for complex logic
- Default parameters over null/undefined checks
- Use RO-RO pattern (Receive Object, Return Object)
- Single level of abstraction

## Data Management
- Encapsulate primitives in composite types
- Classes with internal validation over function validation
- Prefer immutability
- Use `readonly` for unchanging data
- Use `as const` for unchanging literals

## Classes
- Follow SOLID principles
- Composition over inheritance
- Define contracts with interfaces
- Small classes with single purpose:
  - <200 instructions
  - <10 public methods
  - <10 properties

## Exception Handling
- Use exceptions for unexpected errors only
- Catch exceptions to:
  - Fix expected problems
  - Add context
  - Otherwise use global handler

## Cypress Testing Guidelines
- Write clear, descriptive test names
- Use page object pattern for reusable elements
- Implement proper wait strategies
- Use data-cy attributes for element selection
- Group related tests in describe blocks
- Clean up test data after each test 