#!/bin/bash

# Spryker Prompts MCP Server Setup Script
# This script installs uv and provides ready-to-use MCP configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Function to detect OS
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        echo "windows"
    else
        echo "unknown"
    fi
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install uv
install_uv() {
    local os=$(detect_os)

    print_step "Installing uv..."

    if command_exists uv; then
        print_success "uv is already installed at $(which uv)"
        return 0
    fi

    case $os in
        "linux"|"macos")
            print_info "Downloading and installing uv using the official installer..."
            curl -LsSf https://astral.sh/uv/install.sh | sh

            # Source the shell profile to make uv available in current session
            if [ -f "$HOME/.cargo/env" ]; then
                source "$HOME/.cargo/env"
            fi

            # Add to PATH for current session if not already there
            if [[ ":$PATH:" != *":$HOME/.cargo/bin:"* ]]; then
                export PATH="$HOME/.cargo/bin:$PATH"
            fi
            ;;
        "windows")
            print_info "For Windows, please install uv manually using:"
            echo "  powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\""
            echo "Then run this script again."
            exit 1
            ;;
        *)
            print_error "Unsupported operating system: $os"
            print_info "Please install uv manually from: https://docs.astral.sh/uv/#installation"
            exit 1
            ;;
    esac

    # Verify installation
    if command_exists uv; then
        print_success "uv installed successfully at $(which uv)"
    else
         # Try one more time after a brief wait and PATH refresh
                print_info "Refreshing command cache and checking again..."
                sleep 1
                hash -r 2>/dev/null || true
                export PATH="$HOME/.cargo/bin:$PATH"

                if command_exists uv; then
                    print_success "uv installed successfully at $(which uv)"
                else
                    print_error "uv installation failed or not found in PATH"
                    print_info "Try running: export PATH=\"\$HOME/.cargo/bin:\$PATH\" && uv --version"
                    print_info "Or install manually from: https://docs.astral.sh/uv/#installation"
                    exit 1
                fi
    fi
}

# Function to get uvx path
get_uvx_path() {
    local uvx_path

    # First try to find uvx directly
    if command_exists uvx; then
        uvx_path=$(which uvx)
    elif command_exists uv; then
        # If uvx is not found but uv is, uvx should be in the same directory
        local uv_path=$(which uv)
        local uv_dir=$(dirname "$uv_path")
        uvx_path="$uv_dir/uvx"

        if [ ! -f "$uvx_path" ]; then
            # Fallback: uvx might be a subcommand of uv
            print_warning "uvx not found as separate binary, will use 'uv run' instead"
            uvx_path=$(which uv)
        fi
    else
        print_error "Neither uvx nor uv found in PATH"
        exit 1
    fi

    echo "$uvx_path"
}

# Function to generate MCP configuration
generate_mcp_config() {
    local uvx_path=$1
    local use_uv_run=false

    # Check if we need to use 'uv run' instead of uvx
    if [[ "$uvx_path" == *"/uv" ]] && ! command_exists uvx; then
        use_uv_run=true
    fi

    print_step "Generating MCP server configuration..."

    echo
    echo "=================================================="
    echo "  SPRYKER PROMPTS MCP SERVER CONFIGURATION"
    echo "=================================================="
    echo
    echo "Copy the following configuration to your mcpServers:"
    echo "${BLUE}"
    echo "{"
    echo "    \"mcpServers\": {"
    echo "        \"spryker-prompts\": {"
    echo "              \"command\": \"$uvx_path\","

    if [ "$use_uv_run" = true ]; then
        echo "              \"args\": ["
        echo "                \"run\","
        echo "                \"--from\","
        echo "                \"git+https://github.com/spryker-dev/prompt-library\","
        echo "                \"prompt-mcp\""
        echo "              ]"
    else
        echo "              \"args\": ["
        echo "                \"--from\","
        echo "                \"git+https://github.com/spryker-dev/prompt-library\","
        echo "                \"prompt-mcp\""
        echo "              ]"
    fi

    echo "        }"
    echo "    }"
    echo "}"
    echo "${NC}"
    echo "=================================================="
    echo
}

# Main execution
main() {
    echo
    echo "üöÄ Spryker Prompts MCP Server Setup"
    echo "======================================"
    echo

    # Install uv
    install_uv

    # Get uvx path
    local uvx_path
    uvx_path=$(get_uvx_path)
    print_success "Found uvx/uv at: $uvx_path"

    # Generate configuration
    generate_mcp_config "$uvx_path"

    # Additional information
    echo "üìù Additional Information:"
    echo "   ‚Ä¢ MCP server usage may consume additional credits"
    echo "   ‚Ä¢ Consider disabling the server when not actively using prompts"
    echo "   ‚Ä¢ Server repository: https://github.com/spryker-dev/prompt-library"
    echo
    print_warning "Some IDEs may use different configuration keys (e.g., 'mcp-server' instead of 'mcpServers')"
    print_success "Setup completed successfully!"
    echo
}

# Run main function
main "$@"
